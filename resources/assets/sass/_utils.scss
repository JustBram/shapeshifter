$fix-mqW: false !default;
$fix-mqH: false !default;

@mixin respond-min-width($width) {
	@if $fix-mqW {
		@if $fix-mqW >= $width {
			body:after { content:"#{$width}"; }
			@content;
		}
	}
	@else {
		@media screen and (min-width: $width) {
			body:after { content:"#{$width}"; }
			@content;
		}
	}
}
@mixin respond-max-width($width) {
	@if $fix-mqW {
		@if $fix-mqW <= $width {
			@content;
		}
	}
	@else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}
@mixin respond-min-height($height) {
	@if $fix-mqH {
		@if $fix-mqH >= $height {
			@content;
		}
	}
	@else {
		@media screen and (min-height: $height) {
			@content;
		}
	}
}
@mixin respond-max-height($height) {
	@if $fix-mqH {
		@if $fix-mqH <= $height {
			@content;
		}
	}
	@else {
		@media screen and (max-height: $height) {
			@content;
		}
	}
}

@mixin respond-min-combi($width, $height) {
	@if $fix-mqW {
		@if $fix-mqW >= $width {
			body:after { content:"#{$width}"; }
			@content;
		}
	} @else if $fix-mqH {
		@if $fix-mqH >= $height {
			@content;
		}
	}
	@else {
		@media screen and (min-width: $width) and (min-height: $height) {
			body:after { content:"#{$width}"; }
			@content;
		}
	}
}

@mixin respond-max-combi($width, $height) {
	@if $fix-mqW {
		@if $fix-mqW <= $width {
			@content;
		}
	} @else if $fix-mqH {
		@if $fix-mqH <= $height {
			@content;
		}
	}
	@else {
		@media screen and (max-width: $width) and (max-height: $height) {
			@content;
		}
	}
}

@mixin keyframes ($name, $props) {
    .#{$name} {
        -moz-animation: $name $props;
        -o-animation: $name $props;
        -webkit-animation: $name $props;
        animation: $name $props;
    }
    @-moz-keyframes $name { @content; }
    @-o-keyframes $name { @content; }
    @-webkit-keyframes $name { @content; }
    @keyframes $name { @content; }
}

@function em($pxval, $base: $base) {
	@if (unitless($pxval)) {
		$pxval: $pxval * 1px;
	}

	@if (unitless($base)) {
		$base: $base * 1px;
	}

	@return $pxval / $base * 1em;
}

@function globalPerc($base) {
	$global: percentage((100 / 16) * $base) / 100;
	@return $global;
}

@function rem($pxval) {
	@if (unitless($pxval)) {
		$pxval: $pxval * 1px;
	}

	@return $pxval / 16 * 1em;
}

@function cols($colcount, $partial: 1) {
	$total: (percentage(100 / $colcount) / 100) * $partial;
	@return $total;
}
@mixin columns($colcount: 1, $partial: 1) {
	width: cols($colcount, $partial);
}
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) + px;
	font-size: $sizeValue + rem;
}

@mixin arrow($width: 20px, $height: 20px, $direction: up, $color: red){

  width: 0;
  height: 0;

  // Right
  @if $direction == right{
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
}
  // Left
  @if $direction == left{
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
}
  // Up
  @if $direction == up{
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height solid $color;
}  // Down
  @if $direction == down{
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height solid $color;
}

}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
	}
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
	}
}
@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}
